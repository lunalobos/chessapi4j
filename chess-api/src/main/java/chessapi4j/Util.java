package chessapi4j;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

/**
 * Utility class to avoid boilerplate code. Not all of these class methods are
 * safe, be careful.
 *
 * @author lunalobos
 *
 */
public class Util {
	private static final String[] COLS = new String[] { "a", "b", "c", "d", "e", "f", "g", "h" };

	public static final int[][][] QUEEN_MEGAMATRIX = new int[][][] {
			{ { 9, 18, 27, 36, 45, 54, 63 }, {}, {}, {}, { 8, 16, 24, 32, 40, 48, 56 }, {}, { 1, 2, 3, 4, 5, 6, 7 },
					{} },
			{ { 10, 19, 28, 37, 46, 55 }, { 8 }, {}, {}, { 9, 17, 25, 33, 41, 49, 57 }, {}, { 2, 3, 4, 5, 6, 7 },
					{ 0 } },
			{ { 11, 20, 29, 38, 47 }, { 9, 16 }, {}, {}, { 10, 18, 26, 34, 42, 50, 58 }, {}, { 3, 4, 5, 6, 7 },
					{ 1, 0 } },
			{ { 12, 21, 30, 39 }, { 10, 17, 24 }, {}, {}, { 11, 19, 27, 35, 43, 51, 59 }, {}, { 4, 5, 6, 7 },
					{ 2, 1, 0 } },
			{ { 13, 22, 31 }, { 11, 18, 25, 32 }, {}, {}, { 12, 20, 28, 36, 44, 52, 60 }, {}, { 5, 6, 7 },
					{ 3, 2, 1, 0 } },
			{ { 14, 23 }, { 12, 19, 26, 33, 40 }, {}, {}, { 13, 21, 29, 37, 45, 53, 61 }, {}, { 6, 7 },
					{ 4, 3, 2, 1, 0 } },
			{ { 15 }, { 13, 20, 27, 34, 41, 48 }, {}, {}, { 14, 22, 30, 38, 46, 54, 62 }, {}, { 7 },
					{ 5, 4, 3, 2, 1, 0 } },
			{ {}, { 14, 21, 28, 35, 42, 49, 56 }, {}, {}, { 15, 23, 31, 39, 47, 55, 63 }, {}, {},
					{ 6, 5, 4, 3, 2, 1, 0 } },
			{ { 17, 26, 35, 44, 53, 62 }, {}, {}, { 1 }, { 16, 24, 32, 40, 48, 56 }, { 0 },
					{ 9, 10, 11, 12, 13, 14, 15 }, {} },
			{ { 18, 27, 36, 45, 54, 63 }, { 16 }, { 0 }, { 2 }, { 17, 25, 33, 41, 49, 57 }, { 1 },
					{ 10, 11, 12, 13, 14, 15 }, { 8 } },
			{ { 19, 28, 37, 46, 55 }, { 17, 24 }, { 1 }, { 3 }, { 18, 26, 34, 42, 50, 58 }, { 2 },
					{ 11, 12, 13, 14, 15 }, { 9, 8 } },
			{ { 20, 29, 38, 47 }, { 18, 25, 32 }, { 2 }, { 4 }, { 19, 27, 35, 43, 51, 59 }, { 3 }, { 12, 13, 14, 15 },
					{ 10, 9, 8 } },
			{ { 21, 30, 39 }, { 19, 26, 33, 40 }, { 3 }, { 5 }, { 20, 28, 36, 44, 52, 60 }, { 4 }, { 13, 14, 15 },
					{ 11, 10, 9, 8 } },
			{ { 22, 31 }, { 20, 27, 34, 41, 48 }, { 4 }, { 6 }, { 21, 29, 37, 45, 53, 61 }, { 5 }, { 14, 15 },
					{ 12, 11, 10, 9, 8 } },
			{ { 23 }, { 21, 28, 35, 42, 49, 56 }, { 5 }, { 7 }, { 22, 30, 38, 46, 54, 62 }, { 6 }, { 15 },
					{ 13, 12, 11, 10, 9, 8 } },
			{ {}, { 22, 29, 36, 43, 50, 57 }, { 6 }, {}, { 23, 31, 39, 47, 55, 63 }, { 7 }, {},
					{ 14, 13, 12, 11, 10, 9, 8 } },
			{ { 25, 34, 43, 52, 61 }, {}, {}, { 9, 2 }, { 24, 32, 40, 48, 56 }, { 8, 0 },
					{ 17, 18, 19, 20, 21, 22, 23 }, {} },
			{ { 26, 35, 44, 53, 62 }, { 24 }, { 8 }, { 10, 3 }, { 25, 33, 41, 49, 57 }, { 9, 1 },
					{ 18, 19, 20, 21, 22, 23 }, { 16 } },
			{ { 27, 36, 45, 54, 63 }, { 25, 32 }, { 9, 0 }, { 11, 4 }, { 26, 34, 42, 50, 58 }, { 10, 2 },
					{ 19, 20, 21, 22, 23 }, { 17, 16 } },
			{ { 28, 37, 46, 55 }, { 26, 33, 40 }, { 10, 1 }, { 12, 5 }, { 27, 35, 43, 51, 59 }, { 11, 3 },
					{ 20, 21, 22, 23 }, { 18, 17, 16 } },
			{ { 29, 38, 47 }, { 27, 34, 41, 48 }, { 11, 2 }, { 13, 6 }, { 28, 36, 44, 52, 60 }, { 12, 4 },
					{ 21, 22, 23 }, { 19, 18, 17, 16 } },
			{ { 30, 39 }, { 28, 35, 42, 49, 56 }, { 12, 3 }, { 14, 7 }, { 29, 37, 45, 53, 61 }, { 13, 5 }, { 22, 23 },
					{ 20, 19, 18, 17, 16 } },
			{ { 31 }, { 29, 36, 43, 50, 57 }, { 13, 4 }, { 15 }, { 30, 38, 46, 54, 62 }, { 14, 6 }, { 23 },
					{ 21, 20, 19, 18, 17, 16 } },
			{ {}, { 30, 37, 44, 51, 58 }, { 14, 5 }, {}, { 31, 39, 47, 55, 63 }, { 15, 7 }, {},
					{ 22, 21, 20, 19, 18, 17, 16 } },
			{ { 33, 42, 51, 60 }, {}, {}, { 17, 10, 3 }, { 32, 40, 48, 56 }, { 16, 8, 0 },
					{ 25, 26, 27, 28, 29, 30, 31 }, {} },
			{ { 34, 43, 52, 61 }, { 32 }, { 16 }, { 18, 11, 4 }, { 33, 41, 49, 57 }, { 17, 9, 1 },
					{ 26, 27, 28, 29, 30, 31 }, { 24 } },
			{ { 35, 44, 53, 62 }, { 33, 40 }, { 17, 8 }, { 19, 12, 5 }, { 34, 42, 50, 58 }, { 18, 10, 2 },
					{ 27, 28, 29, 30, 31 }, { 25, 24 } },
			{ { 36, 45, 54, 63 }, { 34, 41, 48 }, { 18, 9, 0 }, { 20, 13, 6 }, { 35, 43, 51, 59 }, { 19, 11, 3 },
					{ 28, 29, 30, 31 }, { 26, 25, 24 } },
			{ { 37, 46, 55 }, { 35, 42, 49, 56 }, { 19, 10, 1 }, { 21, 14, 7 }, { 36, 44, 52, 60 }, { 20, 12, 4 },
					{ 29, 30, 31 }, { 27, 26, 25, 24 } },
			{ { 38, 47 }, { 36, 43, 50, 57 }, { 20, 11, 2 }, { 22, 15 }, { 37, 45, 53, 61 }, { 21, 13, 5 }, { 30, 31 },
					{ 28, 27, 26, 25, 24 } },
			{ { 39 }, { 37, 44, 51, 58 }, { 21, 12, 3 }, { 23 }, { 38, 46, 54, 62 }, { 22, 14, 6 }, { 31 },
					{ 29, 28, 27, 26, 25, 24 } },
			{ {}, { 38, 45, 52, 59 }, { 22, 13, 4 }, {}, { 39, 47, 55, 63 }, { 23, 15, 7 }, {},
					{ 30, 29, 28, 27, 26, 25, 24 } },
			{ { 41, 50, 59 }, {}, {}, { 25, 18, 11, 4 }, { 40, 48, 56 }, { 24, 16, 8, 0 },
					{ 33, 34, 35, 36, 37, 38, 39 }, {} },
			{ { 42, 51, 60 }, { 40 }, { 24 }, { 26, 19, 12, 5 }, { 41, 49, 57 }, { 25, 17, 9, 1 },
					{ 34, 35, 36, 37, 38, 39 }, { 32 } },
			{ { 43, 52, 61 }, { 41, 48 }, { 25, 16 }, { 27, 20, 13, 6 }, { 42, 50, 58 }, { 26, 18, 10, 2 },
					{ 35, 36, 37, 38, 39 }, { 33, 32 } },
			{ { 44, 53, 62 }, { 42, 49, 56 }, { 26, 17, 8 }, { 28, 21, 14, 7 }, { 43, 51, 59 }, { 27, 19, 11, 3 },
					{ 36, 37, 38, 39 }, { 34, 33, 32 } },
			{ { 45, 54, 63 }, { 43, 50, 57 }, { 27, 18, 9, 0 }, { 29, 22, 15 }, { 44, 52, 60 }, { 28, 20, 12, 4 },
					{ 37, 38, 39 }, { 35, 34, 33, 32 } },
			{ { 46, 55 }, { 44, 51, 58 }, { 28, 19, 10, 1 }, { 30, 23 }, { 45, 53, 61 }, { 29, 21, 13, 5 }, { 38, 39 },
					{ 36, 35, 34, 33, 32 } },
			{ { 47 }, { 45, 52, 59 }, { 29, 20, 11, 2 }, { 31 }, { 46, 54, 62 }, { 30, 22, 14, 6 }, { 39 },
					{ 37, 36, 35, 34, 33, 32 } },
			{ {}, { 46, 53, 60 }, { 30, 21, 12, 3 }, {}, { 47, 55, 63 }, { 31, 23, 15, 7 }, {},
					{ 38, 37, 36, 35, 34, 33, 32 } },
			{ { 49, 58 }, {}, {}, { 33, 26, 19, 12, 5 }, { 48, 56 }, { 32, 24, 16, 8, 0 },
					{ 41, 42, 43, 44, 45, 46, 47 }, {} },
			{ { 50, 59 }, { 48 }, { 32 }, { 34, 27, 20, 13, 6 }, { 49, 57 }, { 33, 25, 17, 9, 1 },
					{ 42, 43, 44, 45, 46, 47 }, { 40 } },
			{ { 51, 60 }, { 49, 56 }, { 33, 24 }, { 35, 28, 21, 14, 7 }, { 50, 58 }, { 34, 26, 18, 10, 2 },
					{ 43, 44, 45, 46, 47 }, { 41, 40 } },
			{ { 52, 61 }, { 50, 57 }, { 34, 25, 16 }, { 36, 29, 22, 15 }, { 51, 59 }, { 35, 27, 19, 11, 3 },
					{ 44, 45, 46, 47 }, { 42, 41, 40 } },
			{ { 53, 62 }, { 51, 58 }, { 35, 26, 17, 8 }, { 37, 30, 23 }, { 52, 60 }, { 36, 28, 20, 12, 4 },
					{ 45, 46, 47 }, { 43, 42, 41, 40 } },
			{ { 54, 63 }, { 52, 59 }, { 36, 27, 18, 9, 0 }, { 38, 31 }, { 53, 61 }, { 37, 29, 21, 13, 5 }, { 46, 47 },
					{ 44, 43, 42, 41, 40 } },
			{ { 55 }, { 53, 60 }, { 37, 28, 19, 10, 1 }, { 39 }, { 54, 62 }, { 38, 30, 22, 14, 6 }, { 47 },
					{ 45, 44, 43, 42, 41, 40 } },
			{ {}, { 54, 61 }, { 38, 29, 20, 11, 2 }, {}, { 55, 63 }, { 39, 31, 23, 15, 7 }, {},
					{ 46, 45, 44, 43, 42, 41, 40 } },
			{ { 57 }, {}, {}, { 41, 34, 27, 20, 13, 6 }, { 56 }, { 40, 32, 24, 16, 8, 0 },
					{ 49, 50, 51, 52, 53, 54, 55 }, {} },
			{ { 58 }, { 56 }, { 40 }, { 42, 35, 28, 21, 14, 7 }, { 57 }, { 41, 33, 25, 17, 9, 1 },
					{ 50, 51, 52, 53, 54, 55 }, { 48 } },
			{ { 59 }, { 57 }, { 41, 32 }, { 43, 36, 29, 22, 15 }, { 58 }, { 42, 34, 26, 18, 10, 2 },
					{ 51, 52, 53, 54, 55 }, { 49, 48 } },
			{ { 60 }, { 58 }, { 42, 33, 24 }, { 44, 37, 30, 23 }, { 59 }, { 43, 35, 27, 19, 11, 3 }, { 52, 53, 54, 55 },
					{ 50, 49, 48 } },
			{ { 61 }, { 59 }, { 43, 34, 25, 16 }, { 45, 38, 31 }, { 60 }, { 44, 36, 28, 20, 12, 4 }, { 53, 54, 55 },
					{ 51, 50, 49, 48 } },
			{ { 62 }, { 60 }, { 44, 35, 26, 17, 8 }, { 46, 39 }, { 61 }, { 45, 37, 29, 21, 13, 5 }, { 54, 55 },
					{ 52, 51, 50, 49, 48 } },
			{ { 63 }, { 61 }, { 45, 36, 27, 18, 9, 0 }, { 47 }, { 62 }, { 46, 38, 30, 22, 14, 6 }, { 55 },
					{ 53, 52, 51, 50, 49, 48 } },
			{ {}, { 62 }, { 46, 37, 28, 19, 10, 1 }, {}, { 63 }, { 47, 39, 31, 23, 15, 7 }, {},
					{ 54, 53, 52, 51, 50, 49, 48 } },
			{ {}, {}, {}, { 49, 42, 35, 28, 21, 14, 7 }, {}, { 48, 40, 32, 24, 16, 8, 0 },
					{ 57, 58, 59, 60, 61, 62, 63 }, {} },
			{ {}, {}, { 48 }, { 50, 43, 36, 29, 22, 15 }, {}, { 49, 41, 33, 25, 17, 9, 1 }, { 58, 59, 60, 61, 62, 63 },
					{ 56 } },
			{ {}, {}, { 49, 40 }, { 51, 44, 37, 30, 23 }, {}, { 50, 42, 34, 26, 18, 10, 2 }, { 59, 60, 61, 62, 63 },
					{ 57, 56 } },
			{ {}, {}, { 50, 41, 32 }, { 52, 45, 38, 31 }, {}, { 51, 43, 35, 27, 19, 11, 3 }, { 60, 61, 62, 63 },
					{ 58, 57, 56 } },
			{ {}, {}, { 51, 42, 33, 24 }, { 53, 46, 39 }, {}, { 52, 44, 36, 28, 20, 12, 4 }, { 61, 62, 63 },
					{ 59, 58, 57, 56 } },
			{ {}, {}, { 52, 43, 34, 25, 16 }, { 54, 47 }, {}, { 53, 45, 37, 29, 21, 13, 5 }, { 62, 63 },
					{ 60, 59, 58, 57, 56 } },
			{ {}, {}, { 53, 44, 35, 26, 17, 8 }, { 55 }, {}, { 54, 46, 38, 30, 22, 14, 6 }, { 63 },
					{ 61, 60, 59, 58, 57, 56 } },
			{ {}, {}, { 54, 45, 36, 27, 18, 9, 0 }, {}, {}, { 55, 47, 39, 31, 23, 15, 7 }, {},
					{ 62, 61, 60, 59, 58, 57, 56 } } };;

	public static final int[] QUEEN_DIRECTIONS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7 };

	public static final int[] BISHOP_DIRECTIONS = new int[] { 0, 1, 2, 3 };

	public static final int[] ROOK_DIRECTIONS = new int[] { 4, 5, 6, 7 };

	public static final int[][] WHITE_PAWN_MATRIX_2 = new int[][] { { 9 }, { 8, 10 }, { 9, 11 }, { 10, 12 }, { 11, 13 },
			{ 12, 14 }, { 13, 15 }, { 14 }, { 17 }, { 16, 18 }, { 17, 19 }, { 18, 20 }, { 19, 21 }, { 20, 22 },
			{ 21, 23 }, { 22 }, { 25 }, { 24, 26 }, { 25, 27 }, { 26, 28 }, { 27, 29 }, { 28, 30 }, { 29, 31 }, { 30 },
			{ 33 }, { 32, 34 }, { 33, 35 }, { 34, 36 }, { 35, 37 }, { 36, 38 }, { 37, 39 }, { 38 }, { 41 }, { 40, 42 },
			{ 41, 43 }, { 42, 44 }, { 43, 45 }, { 44, 46 }, { 45, 47 }, { 46 }, { 49 }, { 48, 50 }, { 49, 51 },
			{ 50, 52 }, { 51, 53 }, { 52, 54 }, { 53, 55 }, { 54 }, { 57 }, { 56, 58 }, { 57, 59 }, { 58, 60 },
			{ 59, 61 }, { 60, 62 }, { 61, 63 }, { 62 }, {}, {}, {}, {}, {}, {}, {}, {} };

	public static final int[][] BLACK_PAWN_MATRIX_2 = new int[][] { {}, {}, {}, {}, {}, {}, {}, {}, { 1 }, { 0, 2 },
			{ 1, 3 }, { 2, 4 }, { 3, 5 }, { 4, 6 }, { 5, 7 }, { 6 }, { 9 }, { 8, 10 }, { 9, 11 }, { 10, 12 },
			{ 11, 13 }, { 12, 14 }, { 13, 15 }, { 14 }, { 17 }, { 16, 18 }, { 17, 19 }, { 18, 20 }, { 19, 21 },
			{ 20, 22 }, { 21, 23 }, { 22 }, { 25 }, { 24, 26 }, { 25, 27 }, { 26, 28 }, { 27, 29 }, { 28, 30 },
			{ 29, 31 }, { 30 }, { 33 }, { 32, 34 }, { 33, 35 }, { 34, 36 }, { 35, 37 }, { 36, 38 }, { 37, 39 }, { 38 },
			{ 41 }, { 40, 42 }, { 41, 43 }, { 42, 44 }, { 43, 45 }, { 44, 46 }, { 45, 47 }, { 46 }, { 49 }, { 48, 50 },
			{ 49, 51 }, { 50, 52 }, { 51, 53 }, { 52, 54 }, { 53, 55 }, { 54 } };

	public static final int[][] KNIGHT_MATRIX = new int[][] { { 17, 10 }, { 18, 16, 11 }, { 19, 17, 12, 8 },
			{ 20, 18, 13, 9 }, { 21, 19, 14, 10 }, { 22, 20, 15, 11 }, { 23, 21, 12 }, { 22, 13 }, { 25, 18, 2 },
			{ 26, 24, 19, 3 }, { 27, 25, 20, 16, 4, 0 }, { 28, 26, 21, 17, 5, 1 }, { 29, 27, 22, 18, 6, 2 },
			{ 30, 28, 23, 19, 7, 3 }, { 31, 29, 20, 4 }, { 30, 21, 5 }, { 33, 26, 1, 10 }, { 34, 32, 27, 2, 0, 11 },
			{ 35, 33, 28, 24, 3, 1, 12, 8 }, { 36, 34, 29, 25, 4, 2, 13, 9 }, { 37, 35, 30, 26, 5, 3, 14, 10 },
			{ 38, 36, 31, 27, 6, 4, 15, 11 }, { 39, 37, 28, 7, 5, 12 }, { 38, 29, 6, 13 }, { 41, 34, 9, 18 },
			{ 42, 40, 35, 10, 8, 19 }, { 43, 41, 36, 32, 11, 9, 20, 16 }, { 44, 42, 37, 33, 12, 10, 21, 17 },
			{ 45, 43, 38, 34, 13, 11, 22, 18 }, { 46, 44, 39, 35, 14, 12, 23, 19 }, { 47, 45, 36, 15, 13, 20 },
			{ 46, 37, 14, 21 }, { 49, 42, 17, 26 }, { 50, 48, 43, 18, 16, 27 }, { 51, 49, 44, 40, 19, 17, 28, 24 },
			{ 52, 50, 45, 41, 20, 18, 29, 25 }, { 53, 51, 46, 42, 21, 19, 30, 26 }, { 54, 52, 47, 43, 22, 20, 31, 27 },
			{ 55, 53, 44, 23, 21, 28 }, { 54, 45, 22, 29 }, { 57, 50, 25, 34 }, { 58, 56, 51, 26, 24, 35 },
			{ 59, 57, 52, 48, 27, 25, 36, 32 }, { 60, 58, 53, 49, 28, 26, 37, 33 }, { 61, 59, 54, 50, 29, 27, 38, 34 },
			{ 62, 60, 55, 51, 30, 28, 39, 35 }, { 63, 61, 52, 31, 29, 36 }, { 62, 53, 30, 37 }, { 58, 33, 42 },
			{ 59, 34, 32, 43 }, { 60, 56, 35, 33, 44, 40 }, { 61, 57, 36, 34, 45, 41 }, { 62, 58, 37, 35, 46, 42 },
			{ 63, 59, 38, 36, 47, 43 }, { 60, 39, 37, 44 }, { 61, 38, 45 }, { 41, 50 }, { 42, 40, 51 },
			{ 43, 41, 52, 48 }, { 44, 42, 53, 49 }, { 45, 43, 54, 50 }, { 46, 44, 55, 51 }, { 47, 45, 52 },
			{ 46, 53 } };

	public static long visibleSquares(Position position, int[] directionsIndexs, int square) {

		return Generator.visibleSquares(position.getBits(), directionsIndexs, square, position.wm());
	}

	/**
	 * Separates the given bitboard in individuals bitboards, one for each bit.
	 *
	 * @param bitRep
	 * @return a list containing the separated bitboards
	 */
	public static List<Long> longToList(long bitRep) {
		long j = bitRep;
		List<Long> output = new LinkedList<>();
		while (j != 0) {
			long b = j & -j;
			j &= ~b;
			output.add(b);
		}
		return output;
	}

	/**
	 * Column number for the given square (zero-based)
	 *
	 * @param square
	 * @return the column number for the given square
	 */
	public static int getCol(int square) {
		return square & 7;
	}

	/**
	 * Row number for the given square (zero-based)
	 *
	 * @param square
	 * @return the row number for the given square
	 */
	public static int getRow(int square) {
		return square >> 3;
	}

	/**
	 * Column character for the given square
	 *
	 * @param square
	 * @return the column character for the given square
	 */
	public static String getColLetter(int square) {
		int colNum = getCol(square);
		return COLS[colNum];
	}

	/**
	 * Square for the given column and row
	 *
	 * @param col
	 * @param row
	 * @return the column character for the given square
	 */
	public static int getSquareIndex(int col, int row) {
		return col + row * 8;
	}

	/**
	 * Promotion checker for the given target square
	 *
	 * @param targetSquare
	 * @return true if it is a promotion square
	 */
	public static boolean isPromotion(int targetSquare) {
		return Generator.isPromotion(targetSquare) == 1L;
	}

	/**
	 * Square number for the given square in algebraic notation
	 *
	 * @param square
	 * @return square number for the given square in algebraic notation
	 */
	public static int getSquareIndex(String square) {
		char[] chars = square.toCharArray();
		int collum = getColIndex(new String(new char[] { chars[0] }));
		int row = Integer.parseInt(new String(new char[] { chars[1] })) - 1;
		return getSquareIndex(collum, row);
	}

	/**
	 * Column number for the given column character
	 *
	 * @param col
	 * @return the column number for the given column character
	 */
	public static int getColIndex(String col) {
		return Arrays.binarySearch(COLS, col);
	}

	/**
	 * True if the position is in check false otherwise.
	 *
	 * @param position
	 * @return true if the position is in check false otherwise
	 */
	public static boolean isInCheck(Position position) {
		return GeneratorFactory.pseudoInternalSingleton.isInCheck(position) == 1;
	}

	/**
	 * Piece counter for the given position.
	 *
	 * @param position
	 * @return the number of pieces for the given position
	 */
	public static int countPieces(Position position) {
		long[] bits = position.getBits();
		int sum = 0;
		for (long bitRep : bits) {
			sum += Long.bitCount(bitRep);
		}
		return sum;
	}
}
