/*
 * Copyright 2025 Miguel Angel Luna Lobos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://github.com/lunalobos/chessapi4j/blob/master/LICENSE
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package chessapi4j;

import java.util.Objects;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.stream.IntStream;
//singleton bean
/**
 * An evaluator that calculates a numerical evaluation score for a
 * given chess position based on piece values and their positions on the board.
 * It is experimental and not fast enough.
 *
 * @author lunalobos
 * @since 1.0.0
 */
class EvaluatorImp implements Evaluator {
	private static final Logger logger = LoggerFactory.getLogger(EvaluatorImp.class);
	private static final long[] KING_MATRIX_MASK = new long[] {
			0b0000000000000000000000000000000000000000000000000000001100000010L,
			0b0000000000000000000000000000000000000000000000000000011100000101L,
			0b0000000000000000000000000000000000000000000000000000111000001010L,
			0b0000000000000000000000000000000000000000000000000001110000010100L,
			0b0000000000000000000000000000000000000000000000000011100000101000L,
			0b0000000000000000000000000000000000000000000000000111000001010000L,
			0b0000000000000000000000000000000000000000000000001110000010100000L,
			0b0000000000000000000000000000000000000000000000001100000101000000L,
			0b0000000000000000000000000000000000000000000000110000001010000011L,
			0b0000000000000000000000000000000000000000000001110000010100000111L,
			0b0000000000000000000000000000000000000000000011100000101000001110L,
			0b0000000000000000000000000000000000000000000111000001010000011100L,
			0b0000000000000000000000000000000000000000001110000010100000111000L,
			0b0000000000000000000000000000000000000000011100000101000001110000L,
			0b0000000000000000000000000000000000000000111000001010000011100000L,
			0b0000000000000000000000000000000000000000110000010100000011000000L,
			0b0000000000000000000000000000000000000011000000101000001100000000L,
			0b0000000000000000000000000000000000000111000001010000011100000000L,
			0b0000000000000000000000000000000000001110000010100000111000000000L,
			0b0000000000000000000000000000000000011100000101000001110000000000L,
			0b0000000000000000000000000000000000111000001010000011100000000000L,
			0b0000000000000000000000000000000001110000010100000111000000000000L,
			0b0000000000000000000000000000000011100000101000001110000000000000L,
			0b0000000000000000000000000000000011000001010000001100000000000000L,
			0b0000000000000000000000000000001100000010100000110000000000000000L,
			0b0000000000000000000000000000011100000101000001110000000000000000L,
			0b0000000000000000000000000000111000001010000011100000000000000000L,
			0b0000000000000000000000000001110000010100000111000000000000000000L,
			0b0000000000000000000000000011100000101000001110000000000000000000L,
			0b0000000000000000000000000111000001010000011100000000000000000000L,
			0b0000000000000000000000001110000010100000111000000000000000000000L,
			0b0000000000000000000000001100000101000000110000000000000000000000L,
			0b0000000000000000000000110000001010000011000000000000000000000000L,
			0b0000000000000000000001110000010100000111000000000000000000000000L,
			0b0000000000000000000011100000101000001110000000000000000000000000L,
			0b0000000000000000000111000001010000011100000000000000000000000000L,
			0b0000000000000000001110000010100000111000000000000000000000000000L,
			0b0000000000000000011100000101000001110000000000000000000000000000L,
			0b0000000000000000111000001010000011100000000000000000000000000000L,
			0b0000000000000000110000010100000011000000000000000000000000000000L,
			0b0000000000000011000000101000001100000000000000000000000000000000L,
			0b0000000000000111000001010000011100000000000000000000000000000000L,
			0b0000000000001110000010100000111000000000000000000000000000000000L,
			0b0000000000011100000101000001110000000000000000000000000000000000L,
			0b0000000000111000001010000011100000000000000000000000000000000000L,
			0b0000000001110000010100000111000000000000000000000000000000000000L,
			0b0000000011100000101000001110000000000000000000000000000000000000L,
			0b0000000011000001010000001100000000000000000000000000000000000000L,
			0b0000001100000010100000110000000000000000000000000000000000000000L,
			0b0000011100000101000001110000000000000000000000000000000000000000L,
			0b0000111000001010000011100000000000000000000000000000000000000000L,
			0b0001110000010100000111000000000000000000000000000000000000000000L,
			0b0011100000101000001110000000000000000000000000000000000000000000L,
			0b0111000001010000011100000000000000000000000000000000000000000000L,
			0b1110000010100000111000000000000000000000000000000000000000000000L,
			0b1100000101000000110000000000000000000000000000000000000000000000L,
			0b0000001010000011000000000000000000000000000000000000000000000000L,
			0b0000010100000111000000000000000000000000000000000000000000000000L,
			0b0000101000001110000000000000000000000000000000000000000000000000L,
			0b0001010000011100000000000000000000000000000000000000000000000000L,
			0b0010100000111000000000000000000000000000000000000000000000000000L,
			0b0101000001110000000000000000000000000000000000000000000000000000L,
			0b1010000011100000000000000000000000000000000000000000000000000000L,
			0b0100000011000000000000000000000000000000000000000000000000000000L };

	private static final int KING_PLUS = 7;

	private static final long CENTER_MASK = 0b0000000000000000000000000001100000011000000000000000000000000000L;

	private static final int CENTER_PLUS = 6;

	private static final long[] WP_CAPTURES = new long[] {
			0b0000000000000000000000000000000000000000000000000000001000000000L,
			0b0000000000000000000000000000000000000000000000000000010100000000L,
			0b0000000000000000000000000000000000000000000000000000101000000000L,
			0b0000000000000000000000000000000000000000000000000001010000000000L,
			0b0000000000000000000000000000000000000000000000000010100000000000L,
			0b0000000000000000000000000000000000000000000000000101000000000000L,
			0b0000000000000000000000000000000000000000000000001010000000000000L,
			0b0000000000000000000000000000000000000000000000000100000000000000L,
			0b0000000000000000000000000000000000000000000000100000000000000000L,
			0b0000000000000000000000000000000000000000000001010000000000000000L,
			0b0000000000000000000000000000000000000000000010100000000000000000L,
			0b0000000000000000000000000000000000000000000101000000000000000000L,
			0b0000000000000000000000000000000000000000001010000000000000000000L,
			0b0000000000000000000000000000000000000000010100000000000000000000L,
			0b0000000000000000000000000000000000000000101000000000000000000000L,
			0b0000000000000000000000000000000000000000010000000000000000000000L,
			0b0000000000000000000000000000000000000010000000000000000000000000L,
			0b0000000000000000000000000000000000000101000000000000000000000000L,
			0b0000000000000000000000000000000000001010000000000000000000000000L,
			0b0000000000000000000000000000000000010100000000000000000000000000L,
			0b0000000000000000000000000000000000101000000000000000000000000000L,
			0b0000000000000000000000000000000001010000000000000000000000000000L,
			0b0000000000000000000000000000000010100000000000000000000000000000L,
			0b0000000000000000000000000000000001000000000000000000000000000000L,
			0b0000000000000000000000000000001000000000000000000000000000000000L,
			0b0000000000000000000000000000010100000000000000000000000000000000L,
			0b0000000000000000000000000000101000000000000000000000000000000000L,
			0b0000000000000000000000000001010000000000000000000000000000000000L,
			0b0000000000000000000000000010100000000000000000000000000000000000L,
			0b0000000000000000000000000101000000000000000000000000000000000000L,
			0b0000000000000000000000001010000000000000000000000000000000000000L,
			0b0000000000000000000000000100000000000000000000000000000000000000L,
			0b0000000000000000000000100000000000000000000000000000000000000000L,
			0b0000000000000000000001010000000000000000000000000000000000000000L,
			0b0000000000000000000010100000000000000000000000000000000000000000L,
			0b0000000000000000000101000000000000000000000000000000000000000000L,
			0b0000000000000000001010000000000000000000000000000000000000000000L,
			0b0000000000000000010100000000000000000000000000000000000000000000L,
			0b0000000000000000101000000000000000000000000000000000000000000000L,
			0b0000000000000000010000000000000000000000000000000000000000000000L,
			0b0000000000000010000000000000000000000000000000000000000000000000L,
			0b0000000000000101000000000000000000000000000000000000000000000000L,
			0b0000000000001010000000000000000000000000000000000000000000000000L,
			0b0000000000010100000000000000000000000000000000000000000000000000L,
			0b0000000000101000000000000000000000000000000000000000000000000000L,
			0b0000000001010000000000000000000000000000000000000000000000000000L,
			0b0000000010100000000000000000000000000000000000000000000000000000L,
			0b0000000001000000000000000000000000000000000000000000000000000000L,
			0b0000001000000000000000000000000000000000000000000000000000000000L,
			0b0000010100000000000000000000000000000000000000000000000000000000L,
			0b0000101000000000000000000000000000000000000000000000000000000000L,
			0b0001010000000000000000000000000000000000000000000000000000000000L,
			0b0010100000000000000000000000000000000000000000000000000000000000L,
			0b0101000000000000000000000000000000000000000000000000000000000000L,
			0b1010000000000000000000000000000000000000000000000000000000000000L,
			0b0100000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L };

	private static final long[] WP_ADVANCES = new long[] {
			0b0000000000000000000000000000000000000000000000000000000100000000L,
			0b0000000000000000000000000000000000000000000000000000001000000000L,
			0b0000000000000000000000000000000000000000000000000000010000000000L,
			0b0000000000000000000000000000000000000000000000000000100000000000L,
			0b0000000000000000000000000000000000000000000000000001000000000000L,
			0b0000000000000000000000000000000000000000000000000010000000000000L,
			0b0000000000000000000000000000000000000000000000000100000000000000L,
			0b0000000000000000000000000000000000000000000000001000000000000000L,
			0b0000000000000000000000000000000000000000000000010000000000000000L,
			0b0000000000000000000000000000000000000000000000100000000000000000L,
			0b0000000000000000000000000000000000000000000001000000000000000000L,
			0b0000000000000000000000000000000000000000000010000000000000000000L,
			0b0000000000000000000000000000000000000000000100000000000000000000L,
			0b0000000000000000000000000000000000000000001000000000000000000000L,
			0b0000000000000000000000000000000000000000010000000000000000000000L,
			0b0000000000000000000000000000000000000000100000000000000000000000L,
			0b0000000000000000000000000000000000000001000000000000000000000000L,
			0b0000000000000000000000000000000000000010000000000000000000000000L,
			0b0000000000000000000000000000000000000100000000000000000000000000L,
			0b0000000000000000000000000000000000001000000000000000000000000000L,
			0b0000000000000000000000000000000000010000000000000000000000000000L,
			0b0000000000000000000000000000000000100000000000000000000000000000L,
			0b0000000000000000000000000000000001000000000000000000000000000000L,
			0b0000000000000000000000000000000010000000000000000000000000000000L,
			0b0000000000000000000000000000000100000000000000000000000000000000L,
			0b0000000000000000000000000000001000000000000000000000000000000000L,
			0b0000000000000000000000000000010000000000000000000000000000000000L,
			0b0000000000000000000000000000100000000000000000000000000000000000L,
			0b0000000000000000000000000001000000000000000000000000000000000000L,
			0b0000000000000000000000000010000000000000000000000000000000000000L,
			0b0000000000000000000000000100000000000000000000000000000000000000L,
			0b0000000000000000000000001000000000000000000000000000000000000000L,
			0b0000000000000000000000010000000000000000000000000000000000000000L,
			0b0000000000000000000000100000000000000000000000000000000000000000L,
			0b0000000000000000000001000000000000000000000000000000000000000000L,
			0b0000000000000000000010000000000000000000000000000000000000000000L,
			0b0000000000000000000100000000000000000000000000000000000000000000L,
			0b0000000000000000001000000000000000000000000000000000000000000000L,
			0b0000000000000000010000000000000000000000000000000000000000000000L,
			0b0000000000000000100000000000000000000000000000000000000000000000L,
			0b0000000000000001000000000000000000000000000000000000000000000000L,
			0b0000000000000010000000000000000000000000000000000000000000000000L,
			0b0000000000000100000000000000000000000000000000000000000000000000L,
			0b0000000000001000000000000000000000000000000000000000000000000000L,
			0b0000000000010000000000000000000000000000000000000000000000000000L,
			0b0000000000100000000000000000000000000000000000000000000000000000L,
			0b0000000001000000000000000000000000000000000000000000000000000000L,
			0b0000000010000000000000000000000000000000000000000000000000000000L,
			0b0000000100000000000000000000000000000000000000000000000000000000L,
			0b0000001000000000000000000000000000000000000000000000000000000000L,
			0b0000010000000000000000000000000000000000000000000000000000000000L,
			0b0000100000000000000000000000000000000000000000000000000000000000L,
			0b0001000000000000000000000000000000000000000000000000000000000000L,
			0b0010000000000000000000000000000000000000000000000000000000000000L,
			0b0100000000000000000000000000000000000000000000000000000000000000L,
			0b1000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L };

	private static final long[] BP_CAPTURES = new long[] {
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000010L,
			0b0000000000000000000000000000000000000000000000000000000000000101L,
			0b0000000000000000000000000000000000000000000000000000000000001010L,
			0b0000000000000000000000000000000000000000000000000000000000010100L,
			0b0000000000000000000000000000000000000000000000000000000000101000L,
			0b0000000000000000000000000000000000000000000000000000000001010000L,
			0b0000000000000000000000000000000000000000000000000000000010100000L,
			0b0000000000000000000000000000000000000000000000000000000001000000L,
			0b0000000000000000000000000000000000000000000000000000001000000000L,
			0b0000000000000000000000000000000000000000000000000000010100000000L,
			0b0000000000000000000000000000000000000000000000000000101000000000L,
			0b0000000000000000000000000000000000000000000000000001010000000000L,
			0b0000000000000000000000000000000000000000000000000010100000000000L,
			0b0000000000000000000000000000000000000000000000000101000000000000L,
			0b0000000000000000000000000000000000000000000000001010000000000000L,
			0b0000000000000000000000000000000000000000000000000100000000000000L,
			0b0000000000000000000000000000000000000000000000100000000000000000L,
			0b0000000000000000000000000000000000000000000001010000000000000000L,
			0b0000000000000000000000000000000000000000000010100000000000000000L,
			0b0000000000000000000000000000000000000000000101000000000000000000L,
			0b0000000000000000000000000000000000000000001010000000000000000000L,
			0b0000000000000000000000000000000000000000010100000000000000000000L,
			0b0000000000000000000000000000000000000000101000000000000000000000L,
			0b0000000000000000000000000000000000000000010000000000000000000000L,
			0b0000000000000000000000000000000000000010000000000000000000000000L,
			0b0000000000000000000000000000000000000101000000000000000000000000L,
			0b0000000000000000000000000000000000001010000000000000000000000000L,
			0b0000000000000000000000000000000000010100000000000000000000000000L,
			0b0000000000000000000000000000000000101000000000000000000000000000L,
			0b0000000000000000000000000000000001010000000000000000000000000000L,
			0b0000000000000000000000000000000010100000000000000000000000000000L,
			0b0000000000000000000000000000000001000000000000000000000000000000L,
			0b0000000000000000000000000000001000000000000000000000000000000000L,
			0b0000000000000000000000000000010100000000000000000000000000000000L,
			0b0000000000000000000000000000101000000000000000000000000000000000L,
			0b0000000000000000000000000001010000000000000000000000000000000000L,
			0b0000000000000000000000000010100000000000000000000000000000000000L,
			0b0000000000000000000000000101000000000000000000000000000000000000L,
			0b0000000000000000000000001010000000000000000000000000000000000000L,
			0b0000000000000000000000000100000000000000000000000000000000000000L,
			0b0000000000000000000000100000000000000000000000000000000000000000L,
			0b0000000000000000000001010000000000000000000000000000000000000000L,
			0b0000000000000000000010100000000000000000000000000000000000000000L,
			0b0000000000000000000101000000000000000000000000000000000000000000L,
			0b0000000000000000001010000000000000000000000000000000000000000000L,
			0b0000000000000000010100000000000000000000000000000000000000000000L,
			0b0000000000000000101000000000000000000000000000000000000000000000L,
			0b0000000000000000010000000000000000000000000000000000000000000000L,
			0b0000000000000010000000000000000000000000000000000000000000000000L,
			0b0000000000000101000000000000000000000000000000000000000000000000L,
			0b0000000000001010000000000000000000000000000000000000000000000000L,
			0b0000000000010100000000000000000000000000000000000000000000000000L,
			0b0000000000101000000000000000000000000000000000000000000000000000L,
			0b0000000001010000000000000000000000000000000000000000000000000000L,
			0b0000000010100000000000000000000000000000000000000000000000000000L,
			0b0000000001000000000000000000000000000000000000000000000000000000L };

	private static final long[] BP_ADVANCES = new long[] {
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000000L,
			0b0000000000000000000000000000000000000000000000000000000000000001L,
			0b0000000000000000000000000000000000000000000000000000000000000010L,
			0b0000000000000000000000000000000000000000000000000000000000000100L,
			0b0000000000000000000000000000000000000000000000000000000000001000L,
			0b0000000000000000000000000000000000000000000000000000000000010000L,
			0b0000000000000000000000000000000000000000000000000000000000100000L,
			0b0000000000000000000000000000000000000000000000000000000001000000L,
			0b0000000000000000000000000000000000000000000000000000000010000000L,
			0b0000000000000000000000000000000000000000000000000000000100000000L,
			0b0000000000000000000000000000000000000000000000000000001000000000L,
			0b0000000000000000000000000000000000000000000000000000010000000000L,
			0b0000000000000000000000000000000000000000000000000000100000000000L,
			0b0000000000000000000000000000000000000000000000000001000000000000L,
			0b0000000000000000000000000000000000000000000000000010000000000000L,
			0b0000000000000000000000000000000000000000000000000100000000000000L,
			0b0000000000000000000000000000000000000000000000001000000000000000L,
			0b0000000000000000000000000000000000000000000000010000000000000000L,
			0b0000000000000000000000000000000000000000000000100000000000000000L,
			0b0000000000000000000000000000000000000000000001000000000000000000L,
			0b0000000000000000000000000000000000000000000010000000000000000000L,
			0b0000000000000000000000000000000000000000000100000000000000000000L,
			0b0000000000000000000000000000000000000000001000000000000000000000L,
			0b0000000000000000000000000000000000000000010000000000000000000000L,
			0b0000000000000000000000000000000000000000100000000000000000000000L,
			0b0000000000000000000000000000000000000001000000000000000000000000L,
			0b0000000000000000000000000000000000000010000000000000000000000000L,
			0b0000000000000000000000000000000000000100000000000000000000000000L,
			0b0000000000000000000000000000000000001000000000000000000000000000L,
			0b0000000000000000000000000000000000010000000000000000000000000000L,
			0b0000000000000000000000000000000000100000000000000000000000000000L,
			0b0000000000000000000000000000000001000000000000000000000000000000L,
			0b0000000000000000000000000000000010000000000000000000000000000000L,
			0b0000000000000000000000000000000100000000000000000000000000000000L,
			0b0000000000000000000000000000001000000000000000000000000000000000L,
			0b0000000000000000000000000000010000000000000000000000000000000000L,
			0b0000000000000000000000000000100000000000000000000000000000000000L,
			0b0000000000000000000000000001000000000000000000000000000000000000L,
			0b0000000000000000000000000010000000000000000000000000000000000000L,
			0b0000000000000000000000000100000000000000000000000000000000000000L,
			0b0000000000000000000000001000000000000000000000000000000000000000L,
			0b0000000000000000000000010000000000000000000000000000000000000000L,
			0b0000000000000000000000100000000000000000000000000000000000000000L,
			0b0000000000000000000001000000000000000000000000000000000000000000L,
			0b0000000000000000000010000000000000000000000000000000000000000000L,
			0b0000000000000000000100000000000000000000000000000000000000000000L,
			0b0000000000000000001000000000000000000000000000000000000000000000L,
			0b0000000000000000010000000000000000000000000000000000000000000000L,
			0b0000000000000000100000000000000000000000000000000000000000000000L,
			0b0000000000000001000000000000000000000000000000000000000000000000L,
			0b0000000000000010000000000000000000000000000000000000000000000000L,
			0b0000000000000100000000000000000000000000000000000000000000000000L,
			0b0000000000001000000000000000000000000000000000000000000000000000L,
			0b0000000000010000000000000000000000000000000000000000000000000000L,
			0b0000000000100000000000000000000000000000000000000000000000000000L,
			0b0000000001000000000000000000000000000000000000000000000000000000L,
			0b0000000010000000000000000000000000000000000000000000000000000000L };

	private static final int PAWN_CAPTURE_PLUS = 5;

	private static final int PAWN_ADVANCE_PLUS = 4;

	private static final int PROMOTION_PLUS = 4;

	private static final int STANDARD_SQUARE_VALUE = 6;

	private static final int WHITE_8_ROW = 7;

	private static final int BLACK_8_ROW = 0;

	private static final int WK_VALUE = 11;

	private static final int BK_VALUE = 11;

	private static final long[] KNIGHT_MASK_MATRIX = new long[] {
			0b0000000000000000000000000000000000000000000000100000010000000000L,
			0b0000000000000000000000000000000000000000000001010000100000000000L,
			0b0000000000000000000000000000000000000000000010100001000100000000L,
			0b0000000000000000000000000000000000000000000101000010001000000000L,
			0b0000000000000000000000000000000000000000001010000100010000000000L,
			0b0000000000000000000000000000000000000000010100001000100000000000L,
			0b0000000000000000000000000000000000000000101000000001000000000000L,
			0b0000000000000000000000000000000000000000010000000010000000000000L,
			0b0000000000000000000000000000000000000010000001000000000000000100L,
			0b0000000000000000000000000000000000000101000010000000000000001000L,
			0b0000000000000000000000000000000000001010000100010000000000010001L,
			0b0000000000000000000000000000000000010100001000100000000000100010L,
			0b0000000000000000000000000000000000101000010001000000000001000100L,
			0b0000000000000000000000000000000001010000100010000000000010001000L,
			0b0000000000000000000000000000000010100000000100000000000000010000L,
			0b0000000000000000000000000000000001000000001000000000000000100000L,
			0b0000000000000000000000000000001000000100000000000000010000000010L,
			0b0000000000000000000000000000010100001000000000000000100000000101L,
			0b0000000000000000000000000000101000010001000000000001000100001010L,
			0b0000000000000000000000000001010000100010000000000010001000010100L,
			0b0000000000000000000000000010100001000100000000000100010000101000L,
			0b0000000000000000000000000101000010001000000000001000100001010000L,
			0b0000000000000000000000001010000000010000000000000001000010100000L,
			0b0000000000000000000000000100000000100000000000000010000001000000L,
			0b0000000000000000000000100000010000000000000001000000001000000000L,
			0b0000000000000000000001010000100000000000000010000000010100000000L,
			0b0000000000000000000010100001000100000000000100010000101000000000L,
			0b0000000000000000000101000010001000000000001000100001010000000000L,
			0b0000000000000000001010000100010000000000010001000010100000000000L,
			0b0000000000000000010100001000100000000000100010000101000000000000L,
			0b0000000000000000101000000001000000000000000100001010000000000000L,
			0b0000000000000000010000000010000000000000001000000100000000000000L,
			0b0000000000000010000001000000000000000100000000100000000000000000L,
			0b0000000000000101000010000000000000001000000001010000000000000000L,
			0b0000000000001010000100010000000000010001000010100000000000000000L,
			0b0000000000010100001000100000000000100010000101000000000000000000L,
			0b0000000000101000010001000000000001000100001010000000000000000000L,
			0b0000000001010000100010000000000010001000010100000000000000000000L,
			0b0000000010100000000100000000000000010000101000000000000000000000L,
			0b0000000001000000001000000000000000100000010000000000000000000000L,
			0b0000001000000100000000000000010000000010000000000000000000000000L,
			0b0000010100001000000000000000100000000101000000000000000000000000L,
			0b0000101000010001000000000001000100001010000000000000000000000000L,
			0b0001010000100010000000000010001000010100000000000000000000000000L,
			0b0010100001000100000000000100010000101000000000000000000000000000L,
			0b0101000010001000000000001000100001010000000000000000000000000000L,
			0b1010000000010000000000000001000010100000000000000000000000000000L,
			0b0100000000100000000000000010000001000000000000000000000000000000L,
			0b0000010000000000000001000000001000000000000000000000000000000000L,
			0b0000100000000000000010000000010100000000000000000000000000000000L,
			0b0001000100000000000100010000101000000000000000000000000000000000L,
			0b0010001000000000001000100001010000000000000000000000000000000000L,
			0b0100010000000000010001000010100000000000000000000000000000000000L,
			0b1000100000000000100010000101000000000000000000000000000000000000L,
			0b0001000000000000000100001010000000000000000000000000000000000000L,
			0b0010000000000000001000000100000000000000000000000000000000000000L,
			0b0000000000000100000000100000000000000000000000000000000000000000L,
			0b0000000000001000000001010000000000000000000000000000000000000000L,
			0b0000000000010001000010100000000000000000000000000000000000000000L,
			0b0000000000100010000101000000000000000000000000000000000000000000L,
			0b0000000001000100001010000000000000000000000000000000000000000000L,
			0b0000000010001000010100000000000000000000000000000000000000000000L,
			0b0000000000010000101000000000000000000000000000000000000000000000L,
			0b0000000000100000010000000000000000000000000000000000000000000000L };
	protected EvaluatorImp() {
		logger.instanciation();
	}

	private static int eval(Position position) {
		Position inverseMovePosition = position.makeClone();
		inverseMovePosition.changeColorToMove();
		Position wmPosition = position.isWhiteMove() ? position : inverseMovePosition;
		Position bmPosition = position.isWhiteMove() ? inverseMovePosition : position;
		long wk = position.getBits()[Piece.WK.ordinal() - 1];
		long bk = position.getBits()[Piece.BK.ordinal() - 1];
		long white = IntStream.range(Piece.WP.ordinal(), Piece.BP.ordinal()).mapToObj(i -> position.getBits()[i - 1])
				.reduce(0L, (result, element) -> result | element);
		long black = IntStream.range(Piece.BP.ordinal(), Piece.BK.ordinal() + 1)
				.mapToObj(i -> position.getBits()[i - 1]).reduce(0L, (result, element) -> result | element);
		long whiteThreats = 0L;
		long blackThreats = 0L;
		long whiteKingMask = KING_MATRIX_MASK[Long.numberOfTrailingZeros(wk)];
		long blackKingMask = KING_MATRIX_MASK[Long.numberOfTrailingZeros(bk)];

		int[] values = new int[64];
		// WP
		long wp = position.getBits()[Piece.WP.ordinal() - 1];
		int eval = 0;
		long j = wp;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long captures = WP_CAPTURES[square];
			long advances = WP_ADVANCES[square];

			int row = Long.numberOfTrailingZeros(lb) >> 3;
			// promotion plus
			e += (row - BLACK_8_ROW) << PROMOTION_PLUS;
			// center plus
			e += Long.bitCount(captures & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e += Long.bitCount(captures & blackKingMask) << KING_PLUS;
			// capture value
			e += Long.bitCount(captures) << PAWN_CAPTURE_PLUS;
			// advance value
			e += Long.bitCount(advances) << PAWN_ADVANCE_PLUS;
			// threats
			whiteThreats |= (captures & black);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// BP
		long bp = position.getBits()[Piece.BP.ordinal() - 1];
		j = bp;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long captures = BP_CAPTURES[square];
			long advances = BP_ADVANCES[square];

			int row = Long.numberOfTrailingZeros(lb) >> 3;
			// promotion plus
			e -= (WHITE_8_ROW - row) << PROMOTION_PLUS;
			// center plus
			e -= Long.bitCount(captures & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e -= Long.bitCount(captures & whiteKingMask) << KING_PLUS;
			// capture value
			e -= Long.bitCount(captures) << PAWN_CAPTURE_PLUS;
			// advance value
			e -= Long.bitCount(advances) << PAWN_ADVANCE_PLUS;
			// threats
			blackThreats |= (captures & white);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// WN
		long wn = position.getBits()[Piece.WN.ordinal() - 1];
		j = wn;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long squares = KNIGHT_MASK_MATRIX[square] & ~white;
			// center plus
			e += Long.bitCount(squares & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e += Long.bitCount(squares & blackKingMask) << KING_PLUS;
			// standard value
			e += Long.bitCount(squares) << STANDARD_SQUARE_VALUE;
			// threats
			whiteThreats |= (squares & black);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// BN
		long bn = position.getBits()[Piece.BN.ordinal() - 1];
		j = bn;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long squares = KNIGHT_MASK_MATRIX[square] & ~black;
			// center plus
			e -= Long.bitCount(squares & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e -= Long.bitCount(squares & whiteKingMask) << KING_PLUS;
			// standard value
			e -= Long.bitCount(squares) << STANDARD_SQUARE_VALUE;
			// threats
			blackThreats |= (squares & white);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// WB
		long wb = position.getBits()[Piece.WB.ordinal() - 1];
		j = wb;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long squares = Util.visibleSquares(wmPosition, Util.BISHOP_DIRECTIONS, Long.numberOfTrailingZeros(lb));
			// center plus
			e += Long.bitCount(squares & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e += Long.bitCount(squares & blackKingMask) << KING_PLUS;
			// standard value
			e += Long.bitCount(squares) << STANDARD_SQUARE_VALUE;
			// threats
			whiteThreats |= (squares & black);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// BB
		long bb = position.getBits()[Piece.BB.ordinal() - 1];
		j = bb;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long squares = Util.visibleSquares(bmPosition, Util.BISHOP_DIRECTIONS, Long.numberOfTrailingZeros(lb));
			// center plus
			e -= Long.bitCount(squares & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e -= Long.bitCount(squares & whiteKingMask) << KING_PLUS;
			// standard value
			e -= Long.bitCount(squares) << STANDARD_SQUARE_VALUE;
			// threats
			blackThreats |= (squares & white);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// WR
		long wr = position.getBits()[Piece.WR.ordinal() - 1];
		j = wr;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long squares = Util.visibleSquares(wmPosition, Util.ROOK_DIRECTIONS, Long.numberOfTrailingZeros(lb));
			// center plus
			e += Long.bitCount(squares & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e += Long.bitCount(squares & blackKingMask) << KING_PLUS;
			// standard value
			e += Long.bitCount(squares) << STANDARD_SQUARE_VALUE;
			// threats
			whiteThreats |= (squares & black);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// BR
		long br = position.getBits()[Piece.BR.ordinal() - 1];
		j = br;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long squares = Util.visibleSquares(bmPosition, Util.ROOK_DIRECTIONS, Long.numberOfTrailingZeros(lb));
			// center plus
			e -= Long.bitCount(squares & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e -= Long.bitCount(squares & whiteKingMask) << KING_PLUS;
			// standard value
			e -= Long.bitCount(squares) << STANDARD_SQUARE_VALUE;
			// threats
			blackThreats |= (squares & white);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// WQ
		long wq = position.getBits()[Piece.WQ.ordinal() - 1];
		j = wq;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long squares = Util.visibleSquares(wmPosition, Util.QUEEN_DIRECTIONS, Long.numberOfTrailingZeros(lb));
			// center plus
			e += Long.bitCount(squares & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e += Long.bitCount(squares & blackKingMask) << KING_PLUS;
			// standard value
			e += Long.bitCount(squares) << STANDARD_SQUARE_VALUE;
			// threats
			whiteThreats |= (squares & black);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// BQ
		long bq = position.getBits()[Piece.BQ.ordinal() - 1];
		j = bq;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int e = 0;
			int square = Long.numberOfTrailingZeros(lb);
			long squares = Util.visibleSquares(bmPosition, Util.ROOK_DIRECTIONS, Long.numberOfTrailingZeros(lb));
			// center plus
			e -= Long.bitCount(squares & CENTER_MASK) << CENTER_PLUS;
			// king plus
			e -= Long.bitCount(squares & whiteKingMask) << KING_PLUS;
			// standard value
			e -= Long.bitCount(squares) << STANDARD_SQUARE_VALUE;
			// threats
			blackThreats |= (squares & white);
			values[square] = e;
			eval += e;
			j = j & ~lb;
		}

		// WK
		values[Long.numberOfTrailingZeros(position.getBits()[Piece.WK.ordinal() - 1])] = 1 << WK_VALUE;

		// BK
		values[Long.numberOfTrailingZeros(position.getBits()[Piece.BK.ordinal() - 1])] = 1 << BK_VALUE;

		// whiteThreats
		j = whiteThreats;
		Queue<Integer> whiteQueue = new PriorityQueue<>((i1, i2) -> Integer.compare(i1, i2));
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int square = Long.numberOfTrailingZeros(lb);
			whiteQueue.offer(values[square]);
			j = j & ~lb;
		}
		// discard first thread
		whiteQueue.poll();
		// white gains at least this
		Integer whiteGain = whiteQueue.poll();
		eval -= Objects.isNull(whiteGain) ? 0 : whiteGain;

		// blackThreats
		Queue<Integer> blackQueue = new PriorityQueue<>((i1, i2) -> -Integer.compare(i1, i2));
		j = blackThreats;
		while (j != 0L) {
			long lb = Long.lowestOneBit(j);
			int square = Long.numberOfTrailingZeros(lb);
			blackQueue.offer(values[square]);
			j = j & ~lb;
		}
		// discard first thread
		blackQueue.poll();
		// black gains at least this
		Integer blackGain = whiteQueue.poll();
		eval -= Objects.isNull(blackGain) ? 0 : blackGain;

		return eval;
	}


	@Override
	public int evaluate(Position position) {
		return eval(position);
	}


}
